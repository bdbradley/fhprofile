<html>
  <head> 
<!--For Google fonts-->
  <link rel="stylesheet" type="text/css" href="style.css">

  <link href="https://fonts.googleapis.com/css?family=Comfortaa" rel="stylesheet">

  <link
    rel="stylesheet"
    href="prism-atom-dark.css"
    type="text/css"
    media="screen"
  />

  <script type="text/javascript" src="prism.js"></script>
  <script type="text/javascript" src="prism.ruby.js"></script>

    <title>Barry Bradley</title>

      <meta name="description" content="Barry Bradley is an aspiring 
        software engineer specializing in full-stack development.
        He has experience with Ruby, Rails, JavaScript,
        and building web applications.">
  
  </head>

  <body>
  <!-- div is a way to group a collection of html tags
  adding a class allows the div to be styled in css-->
  <div class="about-container">
    <ul>
      <li><a href="#" class="nav-link">About</a></li>
      <li><a href="#code-samples" class="nav-link">Code Samples</a></li>
      <li><a href="#web-apps" class="nav-link">Web Apps</a></li>
      <li><a href="#skills-and-tools" class="nav-link">Skills &amp; Tools</a></li>
      <li><a href="https://github.com/bdbradley" class="nav-link">Github</a></li>
      <li class="hire-me"><a href="#hire-me" class="nav-link">Contact</a></li>
    </ul>  

  
    <div class="about">

      <%= image_tag("B-11.jpg") %> 

      <h1>Barry Bradley</h1>


      <h2>Developer</h2>

       <hr class="grey"/>
       <p class="bio"> 
          Focusing on Ruby - Rails - HTML - CSS - JS
          <br><br>
          Graduate of the Firehose Project coding bootcamp
          
       </p>
    </div>
  </div>


 <h3 id="code-samples">Code Samples</h3>

 <hr class="black" />

 <div class="box">

   <h4> Temperature Conversion</h4>
   <p>
   Prompts the user for the temperature
   in degrees Celsius and lets the user know the corresponding 
   temperature in Fahrenheit.
   </p>
</div>

<div class="box">

<pre><code class="language-ruby">puts &quot;Enter a temperature in degrees Celsius to convert to degrees Fahrenheit&quot;

to_F = gets.chomp

puts &quot;Your temperature is #{to_F.to_i*1.8+32} degrees Fahrenheit&quot;</code></pre>

</div>

<br class="clear" />

<div class="box">
  
 <pre><code class="language-ruby">puts &quot;Enter a number:&quot;

num = gets.chomp.to_i 
num_last_digit = num % 10

if num == 11
  puts &quot;You added the #{num}th item&quot;

elsif num == 12
  puts &quot;You added the #{num}th item&quot;
  
elsif num == 13
  puts &quot;You added the #{num}th item&quot;

elsif num_last_digit == 1
  puts &quot;You added the #{num}st item&quot;
  
elsif num_last_digit == 2
  puts &quot;You added the #{num}nd item&quot;
  
elsif num_last_digit == 3
  puts &quot;You added the #{num}rd item&quot;
  
else 
  puts &quot;You added the #{num}th item&quot;

end </code></pre>

</div>

<div class="box">
  <h4>Ordinal Challenge</h4>
  <p>This program will convert a plain number to the ordinal of the number. For example, if the user enters 2, the program will return 2nd.
  If the user enters 3, it will return 3rd, etc.</p>
</div>

<br class="clear" />

<div class="box">
  <h4>Foobar</h4>
  <p>An adaptation of a technical interview problem 
  which displays sequences of the Foobar pattern.</p>
</div>

<div class="box">
  
  <pre><code class="language-ruby">def foobar(input_num)
  
n = 1

while n &lt;= input_num 
  
  if n % 15 == 0
    puts &quot;Foobar&quot; 
  
  elsif n % 5 == 0
    puts &quot;Bar&quot;
  
  elsif n % 3 == 0 
    puts &quot;Foo&quot;

  else
    puts n

  end
  
  n = n + 1
  
  end
end

#Prompts and accepts user input
puts &quot;How many items do you want to see?&quot;

user_number = gets.chomp.to_i

#Calls method foobar(input_num) on user input 
foobar(user_number) </code></pre>

</div>

<br class="clear" />

<div class="box">
 <pre><code class="language-ruby">
class Tree
  attr_accessor :payload, :children

  def initialize(payload, children)
    @payload = payload
    @children = children
  end

  def breadth_first(n)

    queue = MyQueue.new
    puts @payload
    return self if @payload == n
    @children.each do |child| 
      # pushes each child onto stack 
      queue.enqueue(child)
    end  

    while queue.has_elements? do 
      # 'pops' off of queue and assigns to next_node
      next_node = queue.dequeue
        puts next_node.payload
      return next_node if next_node.payload == n
      next_node.children.each do |child|
        puts &quot;enquing #{child.payload}&quot;
        queue.enqueue(child)
      end
    end
    puts &quot;nil&quot;
  end

  def depth_first
  #@payload would be 2
    puts @payload
    #Returns tree(11)
    return self if @payload == 11
    #if payload not 11 loops through children
    @children.each do |child|
      #Sets child to var1 and returns if not nil
      var1 = child.depth_first
      return var1 unless var1.nil?
    end
    nil
  end
end

#Queue
class MyQueue
  def initialize
    @queue = []
  end

  def enqueue(child)
    @queue.push(child)
  end

  def dequeue
    @queue.shift
  end

  def has_elements?
    !@queue.empty?
  end
end

# The &quot;Leafs&quot; of a tree, elements that have no children
deep_fifth_node = Tree.new(5, [])
eleventh_node = Tree.new(11, [])
fourth_node   = Tree.new(4, [])

# The &quot;Branches&quot; of the tree
ninth_node = Tree.new(9, [fourth_node])
sixth_node = Tree.new(6, [deep_fifth_node, eleventh_node])
seventh_node = Tree.new(7, [sixth_node])
shallow_fifth_node = Tree.new(5, [ninth_node])

# The &quot;Trunk&quot; of the tree
trunk   = Tree.new(2, [seventh_node, shallow_fifth_node])

puts &quot;Depth First Method:&quot;
puts trunk.depth_first
puts &quot;--------------------&quot;
puts &quot;Breadth First Method:&quot;
puts trunk.breadth_first(11)
</code></pre>

</div>

<div class="box">
  <h4>Depth / Breadth First Search</h4>
  <p>Depth-first search is an algorithm for traversing tree data structures. The algorithm starts at the root node then explores as far as possible along each branch before backtracking.
  <br><br>
  Breadth-first search starts at the root node and explores all of the neighbor nodes at the present depth then moves on to the nodes at the next depth.</p>
  <%= image_tag "tree.png", :class => "full-width" %>
</div>

<br class="clear" />

<h3 id="web-apps">Web Apps</h3>
    <hr class="black" />

    <div class="box">
      <h4>Quote Generator</h4>
        <a href="https://splurty-barry-bradley.herokuapp.com">
          <%= image_tag "splurty1.JPG", :class => "full-width" %>
        </a>
      <p>
        A database-powered quote generator using the Ruby on Rails framework, HTML, and CSS.
        Uses Git and GitHub for version control and launched
        on Heroku.
      </p>
    </div>

    <div class="box">
      <h4>Yelp Clone</h4>
      <a href="https://nomster-barry-bradley.herokuapp.com">
        <%= image_tag "nomster1.png", :class => "full-width" %>
      </a>
      <p>
        A Yelp clone that integrates with the Google Maps API
        and includes features like user comments, star ratings,
        image uploading, and user authentication.
      </p>
    </div>
    <br class="clear" />

    <div class="box">
      <h4>Two-Sided Market Place</h4>
      <a href="https://flixter-barry-bradley.herokuapp.com">
        <%= image_tag "flixter1.png", :class => "full-width" %>
      </a>
      <p>
        A two-sided, video-streaming marketplace platform that
        features credit card payment capabilities, user role
        management, complex user interfaces, and advanced
        database relationships.
      </p>
    </div>
    <div class="box">
      <h4>Test Driven Development App</h4>
      <a href="https://grammable-barry-bradley.herokuapp.com">
        <%= image_tag "grammable1.png", :class => "full-width" %>
      </a>
      <p>
        An Instagram-type clone that was built using test-driven development following numerous red/green/refactor cycles.
      </p>
    </div>
    <br class="clear" />
    <div class="box">
        <h4>Single Page To-do App</h4>
        <a href="https://todoapp-barry-bradley.herokuapp.com">
          <%= image_tag "todoster1.png", :class => "full-width" %>
        </a>
        <p>
          This single-page to-do application features a
          fluid user interface that, by using JavaScript,
          allows users to rapidly add dynamic content.
        </p>
    </div>
    <div class="box">
      <h4>Agile Team Project</h4>
      <%= image_tag "chess.png", :class => "full-width" %>
      <p>
        Worked on an Agile software development team building
        a chess application. Under the guidance of a senior software engineer,
        we had weekly Agile team meetings for code reviews, sprint planning,
        and feature assignments.
      </p>
    </div>
    <br class="clear" />



  <h3 id="skills-and-tools">Skills &amp; Tools</h3>
    <hr class="black" />
    <p class="skills-and-tools">
      I have developed proficiency and expertise
      in the following programming languages and tools.
    </p>
  <div class="icons">
    <%= image_tag("github.png") %> 
    <%= image_tag("trello.png") %> 
    <%= image_tag("slack.png") %> 
    <%= image_tag("heroku_s.png") %> 
  
    <br class="clear" />
    <%= image_tag("skills.png") %> 
    

  </div>

  <div class="contact-me" id="hire-me">
     <h3 class="contact-headline">Contact</h3>
     <hr class="grey" />

      <p class="contact-info">
        Currently entertaining new opportunities.
        Please get in touch via email:

      </p>

      <p>
        <a href="mailto:bbradley13@gmail.com" class="contact-link">
          bbradley13@gmail.com
        </a>
      </p>
  </div>
</body>

</html>